{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classnames","completed","title","TodoList","todos","map","preparedToDos","userId","usersFromServer","find","App","useState","setTitle","setUserId","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","setTodos","action","method","onSubmit","event","preventDefault","todosIds","newTodo","Math","max","prevTodos","htmlFor","type","placeholder","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c6762c3.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","// import React from 'react';\nimport { User } from '../../types';\n\ninterface UserInfoProps {\n  user: User | null;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import React from 'react';\nimport classnames from 'classnames';\nimport { ToDoWithUser } from '../../types';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ninterface TodoInfoProps {\n  todo: ToDoWithUser;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    key={todo.id}\n    className={classnames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    <UserInfo user={todo.user} />\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { ToDoWithUser } from '../../types';\n\ninterface TodoListProps {\n  todos: ToDoWithUser[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section>\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { ToDoWithUser } from './types';\nimport { TodoList } from './components/TodoList';\n\nconst preparedToDos: ToDoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(({ id }) => id === todo.userId) || null,\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n  const [todos, setTodos] = useState<ToDoWithUser[]>(preparedToDos);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  function handleOnAdd(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (!title && !userId) {\n      setHasTitleError(true);\n      setHasUserIdError(true);\n\n      return;\n    }\n\n    if (!title) {\n      setHasTitleError(true);\n\n      return;\n    }\n\n    if (!userId) {\n      setHasUserIdError(true);\n\n      return;\n    }\n\n    const user = usersFromServer.find(({ id }) => id === userId) || null;\n\n    const todosIds = todos.map(({ id }) => id);\n    const maxTodoId = Math.max(...todosIds);\n\n    const newTodo = {\n      id: maxTodoId + 1,\n      title,\n      userId,\n      completed: false,\n      user,\n    };\n\n    setTodos((prevTodos) => [...prevTodos, newTodo]);\n\n    resetForm();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleOnAdd}>\n        <div className=\"field\">\n          <label htmlFor=\"title-input\">Title:&nbsp;</label>\n          <input\n            id=\"title-input\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user-id\">User:&nbsp;</label>\n          <select\n            id=\"user-id\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserIdChange}\n          >\n            <option value={0}>Choose a user</option>\n\n            {usersFromServer.map((user) => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}