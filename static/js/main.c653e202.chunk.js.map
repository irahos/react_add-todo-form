{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/Form/Form.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classnames","completed","title","TodoList","todos","map","Form","addTodoHandler","useState","setTitle","userId","setUserId","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","isError","usersFromServer","find","htmlFor","type","placeholder","value","onChange","target","preparedToDos","App","setTodos","newTodo","todosIds","maxTodoId","Math","max","preparedTodo","prevTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c653e202.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types';\n\ninterface UserInfoProps {\n  user: User;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport classnames from 'classnames';\nimport { ToDoWithUser } from '../../types';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ninterface TodoInfoProps {\n  todo: ToDoWithUser;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    key={todo.id}\n    className={classnames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    {todo.user && (\n      <UserInfo user={todo.user} />\n    )}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { ToDoWithUser } from '../../types';\n\ninterface TodoListProps {\n  todos: ToDoWithUser[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section>\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport usersFromServer from '../../api/users';\nimport { ToDoWithUser } from '../../types';\n\ntype Props = {\n  addTodoHandler: (newTodo: Omit<ToDoWithUser, 'id'>) => void;\n};\n\nexport const Form: React.FC<Props> = ({ addTodoHandler }) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n\n    if (hasTitleError) {\n      setHasTitleError(false);\n    }\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n\n    if (hasUserIdError) {\n      setHasUserIdError(false);\n    }\n  };\n\n  function handleOnAdd(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    let isError = false;\n\n    if (!title) {\n      setHasTitleError(true);\n      isError = true;\n    }\n\n    if (!userId) {\n      setHasUserIdError(true);\n      isError = true;\n    }\n\n    if (isError) {\n      return;\n    }\n\n    const user = usersFromServer.find(({ id }) => id === userId) || null;\n\n    const newTodo = {\n      title,\n      userId,\n      completed: false,\n      user,\n    };\n\n    addTodoHandler(newTodo);\n\n    resetForm();\n  }\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleOnAdd}>\n      <div className=\"field\">\n        <label htmlFor=\"title-input\">Title:&nbsp;</label>\n        <input\n          id=\"title-input\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n\n        {hasTitleError && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-id\">User:&nbsp;</label>\n        <select\n          id=\"user-id\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value={0}>Choose a user</option>\n\n          {usersFromServer.map((user) => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { ToDoWithUser } from './types';\nimport { TodoList } from './components/TodoList';\nimport { Form } from './components/Form/Form';\n\nconst preparedToDos: ToDoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(({ id }) => id === todo.userId) || null,\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<ToDoWithUser[]>(preparedToDos);\n\n  const addTodoHandler = (newTodo: Omit<ToDoWithUser, 'id'>) => {\n    const todosIds = todos.map(({ id }) => id);\n    const maxTodoId = Math.max(...todosIds);\n\n    const preparedTodo = {\n      ...newTodo,\n      id: maxTodoId + 1,\n    };\n\n    setTodos((prevTodos) => [...prevTodos, preparedTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <Form addTodoHandler={addTodoHandler} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}